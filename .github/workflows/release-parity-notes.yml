name: Attach Canary Parity Summary To Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  attach-parity-summary:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Find latest parity summary artifact
        id: find_artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" > artifacts.json
          aid=$(jq -r '.artifacts | map(select(.name=="release-notes-parity-summary" and .expired==false)) | sort_by(.created_at) | reverse | .[0].id // empty' artifacts.json)
          if [ -z "$aid" ]; then
            echo "aid=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "aid=$aid" >> "$GITHUB_OUTPUT"

      - name: Download parity summary artifact
        if: steps.find_artifact.outputs.aid != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          aid="${{ steps.find_artifact.outputs.aid }}"
          # Download the artifact zip
          curl -L -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$aid/zip" --output artifact.zip
          unzip -o artifact.zip -d artifact || true
          echo "Extracted files:"
          ls -R artifact || true

      - name: Append parity summary to release notes
        if: steps.find_artifact.outputs.aid != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const path = 'artifact/parity_summary.md';
            if (!fs.existsSync(path)) {
              core.info('parity_summary.md not found in artifact; skipping update.');
              return;
            }
            const extra = fs.readFileSync(path, 'utf8');

            // Determine current release
            const release = context.payload.release;
            let rel = release;
            if (!rel) {
              // Fallback: try to find by tag ref
              const tag = (context.ref || '').replace('refs/tags/', '');
              if (tag) {
                const res = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag
                });
                rel = res.data;
              }
            }
            if (!rel) {
              core.info('No release payload found; skipping update.');
              return;
            }

            const body = (rel.body || '') + '\n\n' + extra;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: rel.id,
              body
            });

      - name: Summary if not found
        if: steps.find_artifact.outputs.aid == ''
        run: echo "No parity summary artifact found; skipping release notes update."