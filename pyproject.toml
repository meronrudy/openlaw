[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "legal-hypergraph"
version = "0.1.0"
description = "Provenance-first legal ontology hypergraph system"
authors = [
    {name = "Legal AI Team", email = "team@legal-ai.example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "pydantic>=2.0.0",
    "sqlitedict>=2.1.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
nlp = [
    "transformers>=4.21.0",
    "torch>=1.12.0",
    "spacy>=3.4.0",
    "scikit-learn>=1.1.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "hypothesis>=6.0.0",
]
dev = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.970",
    "pre-commit>=2.20.0",
]

[project.urls]
Homepage = "https://github.com/example/legal-hypergraph"
Documentation = "https://legal-hypergraph.readthedocs.io/"
Repository = "https://github.com/example/legal-hypergraph.git"
Issues = "https://github.com/example/legal-hypergraph/issues"

[project.scripts]
legal-hypergraph = "legal_hypergraph.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "sdk*", "plugins*", "nlp*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interaction", 
    "e2e: End-to-end tests for complete workflows",
    "performance: Performance and scalability tests",
    "security: Security and compliance tests",
    "slow: Tests that take more than 30 seconds",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["core", "sdk", "plugins", "nlp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]